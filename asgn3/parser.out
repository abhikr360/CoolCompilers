Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    DIVIDE
    GTEQ
    TIMES
    OBJECT
    STRING_TYPE
    WHILE
    IMPORT
    NEW
    PLUS
    FI
    TRUE
    MINUS
    BOOL_TYPE
    PRIVATE
    ISVOID
    INTEGER_TYPE
    LT
    TILDA
    INTEGER
    IN
    GETS
    GT
    FOR
    PERIOD
    EQUAL
    AT
    RSQRBRACKET
    ELSE
    LSQRBRACKET
    POOL
    IF
    AND
    FALSE
    LTEQ
    OR
    BREAK
    SELF
    CONTINUE
    LET
    NOT
    COMMA
    PUBLIC
    LOOP
    MOD

Grammar

Rule 0     S' -> program
Rule 1     program -> classes
Rule 2     classes -> class SEMICOLON
Rule 3     class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list RBRACE
Rule 4     features_list -> feature SEMICOLON
Rule 5     feature -> ID LPAREN RPAREN COLON type LBRACE expression RBRACE
Rule 6     type -> SELF_TYPE
Rule 7     expression -> ID LPAREN argument_list RPAREN
Rule 8     argument_list -> expression
Rule 9     expression -> STRING

Terminals, with rules where they appear

AND                  : 
AT                   : 
BOOL_TYPE            : 
BREAK                : 
CLASS                : 3
CLASS_TYPE           : 3 3
COLON                : 5
COMMA                : 
CONTINUE             : 
DIVIDE               : 
ELSE                 : 
EQUAL                : 
FALSE                : 
FI                   : 
FOR                  : 
GETS                 : 
GT                   : 
GTEQ                 : 
ID                   : 5 7
IF                   : 
IMPORT               : 
IN                   : 
INHERITS             : 3
INTEGER              : 
INTEGER_TYPE         : 
ISVOID               : 
LBRACE               : 3 5
LET                  : 
LOOP                 : 
LPAREN               : 5 7
LSQRBRACKET          : 
LT                   : 
LTEQ                 : 
MINUS                : 
MOD                  : 
NEW                  : 
NOT                  : 
OBJECT               : 
OR                   : 
PERIOD               : 
PLUS                 : 
POOL                 : 
PRIVATE              : 
PUBLIC               : 
RBRACE               : 3 5
RPAREN               : 5 7
RSQRBRACKET          : 
SELF                 : 
SELF_TYPE            : 6
SEMICOLON            : 2 4
STRING               : 9
STRING_TYPE          : 
THEN                 : 
TILDA                : 
TIMES                : 
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

argument_list        : 7
class                : 2
classes              : 1
expression           : 5 8
feature              : 4
features_list        : 3
program              : 0
type                 : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . classes
    (2) classes -> . class SEMICOLON
    (3) class -> . CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list RBRACE

    CLASS           shift and go to state 2

    classes                        shift and go to state 3
    program                        shift and go to state 1
    class                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (3) class -> CLASS . CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list RBRACE

    CLASS_TYPE      shift and go to state 5


state 3

    (1) program -> classes .

    $end            reduce using rule 1 (program -> classes .)


state 4

    (2) classes -> class . SEMICOLON

    SEMICOLON       shift and go to state 6


state 5

    (3) class -> CLASS CLASS_TYPE . INHERITS CLASS_TYPE LBRACE features_list RBRACE

    INHERITS        shift and go to state 7


state 6

    (2) classes -> class SEMICOLON .

    $end            reduce using rule 2 (classes -> class SEMICOLON .)


state 7

    (3) class -> CLASS CLASS_TYPE INHERITS . CLASS_TYPE LBRACE features_list RBRACE

    CLASS_TYPE      shift and go to state 8


state 8

    (3) class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE . LBRACE features_list RBRACE

    LBRACE          shift and go to state 9


state 9

    (3) class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE . features_list RBRACE
    (4) features_list -> . feature SEMICOLON
    (5) feature -> . ID LPAREN RPAREN COLON type LBRACE expression RBRACE

    ID              shift and go to state 12

    features_list                  shift and go to state 10
    feature                        shift and go to state 11

state 10

    (3) class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list . RBRACE

    RBRACE          shift and go to state 13


state 11

    (4) features_list -> feature . SEMICOLON

    SEMICOLON       shift and go to state 14


state 12

    (5) feature -> ID . LPAREN RPAREN COLON type LBRACE expression RBRACE

    LPAREN          shift and go to state 15


state 13

    (3) class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list RBRACE .

    SEMICOLON       reduce using rule 3 (class -> CLASS CLASS_TYPE INHERITS CLASS_TYPE LBRACE features_list RBRACE .)


state 14

    (4) features_list -> feature SEMICOLON .

    RBRACE          reduce using rule 4 (features_list -> feature SEMICOLON .)


state 15

    (5) feature -> ID LPAREN . RPAREN COLON type LBRACE expression RBRACE

    RPAREN          shift and go to state 16


state 16

    (5) feature -> ID LPAREN RPAREN . COLON type LBRACE expression RBRACE

    COLON           shift and go to state 17


state 17

    (5) feature -> ID LPAREN RPAREN COLON . type LBRACE expression RBRACE
    (6) type -> . SELF_TYPE

    SELF_TYPE       shift and go to state 18

    type                           shift and go to state 19

state 18

    (6) type -> SELF_TYPE .

    LBRACE          reduce using rule 6 (type -> SELF_TYPE .)


state 19

    (5) feature -> ID LPAREN RPAREN COLON type . LBRACE expression RBRACE

    LBRACE          shift and go to state 20


state 20

    (5) feature -> ID LPAREN RPAREN COLON type LBRACE . expression RBRACE
    (7) expression -> . ID LPAREN argument_list RPAREN
    (9) expression -> . STRING

    ID              shift and go to state 22
    STRING          shift and go to state 23

    expression                     shift and go to state 21

state 21

    (5) feature -> ID LPAREN RPAREN COLON type LBRACE expression . RBRACE

    RBRACE          shift and go to state 24


state 22

    (7) expression -> ID . LPAREN argument_list RPAREN

    LPAREN          shift and go to state 25


state 23

    (9) expression -> STRING .

    RBRACE          reduce using rule 9 (expression -> STRING .)
    RPAREN          reduce using rule 9 (expression -> STRING .)


state 24

    (5) feature -> ID LPAREN RPAREN COLON type LBRACE expression RBRACE .

    SEMICOLON       reduce using rule 5 (feature -> ID LPAREN RPAREN COLON type LBRACE expression RBRACE .)


state 25

    (7) expression -> ID LPAREN . argument_list RPAREN
    (8) argument_list -> . expression
    (7) expression -> . ID LPAREN argument_list RPAREN
    (9) expression -> . STRING

    ID              shift and go to state 22
    STRING          shift and go to state 23

    expression                     shift and go to state 27
    argument_list                  shift and go to state 26

state 26

    (7) expression -> ID LPAREN argument_list . RPAREN

    RPAREN          shift and go to state 28


state 27

    (8) argument_list -> expression .

    RPAREN          reduce using rule 8 (argument_list -> expression .)


state 28

    (7) expression -> ID LPAREN argument_list RPAREN .

    RBRACE          reduce using rule 7 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 7 (expression -> ID LPAREN argument_list RPAREN .)

